generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}        

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  password  String
  firstName String
  lastName  String
  isActive  Boolean @default(true)
}

model Organization {
  id                    String   @id @default(uuid())
  code                  String   @unique
  version               String
  creationDate          DateTime @default(now())
  modificationDate      DateTime?
  name                  String
  address               String?
  phone                 String?
  legalRepresentative   String?
  representativePhone   String?
  taxId                 String?
  contact               String?
  contactPhone          String?
  status                String?
  comments              String?
  projects              Project[]
}

model Project {
  id                    String   @id @default(uuid())
  code                  String
  version               String   @default("00.01")
  name                  String
  description           String?
  creationDate          DateTime @default(now())
  modificationDate      DateTime?
  status                String?
  comments              String?
  organizationId        String
  organization          Organization @relation(fields: [organizationId], references: [id])

  acceptanceRecords     AcceptanceRecord[]
  actors                Actor[]
  educciones            Educcion[]
  interviews            Interview[]
  experts               Expert[]
  sources               Source[]
  interfaces            Interface[]
  relationships         EntityRelationship[]
  nfrs                  NonFunctionalRequirement[]
  risks                 Risk[]

  @@unique([code, organizationId]) // Restricción compuesta: código único por organización
}

model AcceptanceRecord {
  id          String   @id @default(uuid())
  projectId   String
  filePath    String
  fileType    String
  uploadDate  DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
}

model Interview {
  id                String       @id @default(uuid())
  interviewName     String
  version           String
  interviewDate     DateTime
  authorId          String
  intervieweeName   String
  intervieweeRole   String?
  startTime         DateTime
  endTime           DateTime?
  observations      String?
  projectId         String
  agendaItems       AgendaItem[]
  conclusions       Conclusion[]
  author            Author       @relation(fields: [authorId], references: [id])
  project           Project      @relation(fields: [projectId], references: [id])
  evidences         Evidence[]
}

model AgendaItem {
  id           String     @id @default(uuid())
  description  String
  interviewId  String
  interview    Interview  @relation(fields: [interviewId], references: [id])
}

model Conclusion {
  id           String     @id @default(uuid())
  description  String
  interviewId  String
  interview    Interview  @relation(fields: [interviewId], references: [id])
}

model Evidence {
  id             String     @id @default(uuid())
  code           String     @unique
  name           String
  type           String
  interviewId    String
  evidenceDate   DateTime   @default(now())
  file           String
  interview      Interview  @relation(fields: [interviewId], references: [id])
}

model Interface {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  version     String
  date        DateTime @default(now())
  filePath    String
  fileType    String
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
}

model NonFunctionalRequirement {
  id                String    @id @default(uuid())
  code              String    @unique
  version           String
  creationDate      DateTime  @default(now())
  modificationDate  DateTime?
  name              String
  qualityAttribute  String
  description       String
  status            String
  importance        String
  comment           String?
  projectId         String
  sourceNfrCode     String?    // referencia a otras  NFRs
  project           Project   @relation(fields: [projectId], references: [id])
}

model Educcion {
  id                String    @id @default(uuid())
  code              String    
  version           String
  creationDate      DateTime  @default(now())
  modificationDate  DateTime?
  name              String
  description       String
  comment           String?
  status            String
  importance        String
  projectId         String
  project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ilaciones         Ilacion[]

  // Agregar esto para permitir códigos duplicados entre proyectos pero únicos dentro del mismo proyecto
  @@unique([code, projectId])
}

model Ilacion {
  id                String           @id @default(uuid())
  code              String           @unique
  version           String
  name              String
  creationDate      DateTime         @default(now())
  modificationDate  DateTime?
  status            String
  importance        String
  educcionId        String
  precondition      String
  procedure         String
  postcondition     String
  comment           String?
  specifications    Specification[]
  educcion          Educcion         @relation(fields: [educcionId], references: [id])
}

model Specification {
  id                String    @id @default(uuid())
  code              String    @unique
  version           String
  name              String
  creationDate      DateTime  @default(now())
  modificationDate  DateTime?
  status            String
  importance        String
  ilacionId         String
  precondition      String
  procedure         String
  postcondition     String
  comment           String?
  ilacion           Ilacion   @relation(fields: [ilacionId], references: [id])
}

model Role {
  id            String   @id @default(uuid())
  name          String   @unique
  creationDate  DateTime @default(now())
  actors        Actor[]
  authors       Author[]
}

model Author {
  id              String       @id @default(uuid())
  code            String       @unique
  firstName       String
  paternalSurname String?
  maternalSurname String?
  alias           String?
  status          String
  roleId          String?
  role            Role?        @relation(fields: [roleId], references: [id])
  interviews      Interview[]
}

model Actor {
  id         String   @id @default(uuid())
  code       String   @unique
  name       String
  status     String
  type       String
  projectId  String
  roleId     String
  project    Project  @relation(fields: [projectId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
}

model Source {
  id                String    @id @default(uuid())
  code              String    @unique
  version           String
  creationDate      DateTime  @default(now())
  modificationDate  DateTime?
  name              String
  comment           String?
  status            String
  projectId         String
  project           Project   @relation(fields: [projectId], references: [id])
}

model Expert {
  id                String    @id @default(uuid())
  code              String    @unique
  version           String
  creationDate      DateTime  @default(now())
  modificationDate  DateTime?
  paternalSurname   String
  maternalSurname   String?
  firstName         String
  experience        String
  comment           String?
  status            String
  projectId         String
  project           Project   @relation(fields: [projectId], references: [id])
}

model EntityRelationship {
  id            String   @id @default(uuid())
  projectId     String
  entityType    String
  entityId      String
  relationType  String
  relatedId     String
  project       Project  @relation(fields: [projectId], references: [id])
}

model Risk {
  id             String   @id @default(uuid())
  projectId      String
  entityType     String
  registryCode   String
  code           String   @unique
  description    String
  impact         String
  probability    String
  status         String
  creationDate   DateTime @default(now())
  comments       String?
  sourceRiskCode String?
  modificationDate DateTime?
  project        Project  @relation(fields: [projectId], references: [id])
}

model Artifact {
  id        String @id @default(uuid())
  name      String @unique
  mnemonic  String @unique
}

model Counter {
  id         String   @id @default(uuid())
  entity     String   // Name of the child table, such as "education", "linking", etc.
  contextId  String   // ID of the "parent", such as "projectId"
  counter    Int      @default(0) // Counter value
  @@unique([entity, contextId]) // A unique counter per entity and context
}
