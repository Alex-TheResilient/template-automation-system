generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}        

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  password  String
  firstName String
  lastName  String
  isActive  Boolean @default(true)
}

model Organizacion {
  id                    String     @id @default(uuid())
  codigo                String     @unique
  version               String
  fechaCreacion         DateTime   @default(now())
  fechaModificacion     DateTime?
  nombre                String
  direccion             String?
  telefono              String?
  representanteLegal    String?
  telefonoRepresentante String?
  ruc                   String?
  contacto              String?
  telefonoContacto      String?
  estado                String?
  comentarios           String?
  proyectos             Proyecto[]
}

model Proyecto {
  id                String                     @id @default(uuid())
  codigo            String
  version           String  @default("00.01") // Asigna un valor por defecto
  nombre            String
  descripcion       String?
  fechaCreacion     DateTime                   @default(now())
  fechaModificacion DateTime?
  estado            String?
  comentarios       String?
  organizacionId    String
  organizacion      Organizacion               @relation(fields: [organizacionId], references: [id])

  actas             ActaAceptacion[]
  actores           Actor[]
  educciones        Educcion[]
  entrevistas       Entrevista[]
  expertos          Experto[]
  fuentes           Fuente[]
  interfaces        Interfaz[]
  relaciones        RelacionEntidad[]
  rnfs              RequerimientoNoFuncional[]
  riesgos           Riesgo[]

  @@unique([codigo, organizacionId]) // Restricción compuesta: código único por organización
}

model ActaAceptacion {
  id          String   @id @default(uuid())
  proyectoId  String
  rutaArchivo String
  tipoArchivo String
  fechaSubida DateTime @default(now())
  proyecto    Proyecto @relation(fields: [proyectoId], references: [id])
}

model Entrevista {
  id                 String       @id @default(uuid())
  version            String
  fechaEntrevista    DateTime
  autorId            String
  nombreEntrevistado String
  cargoEntrevistado  String?
  horaInicio         DateTime
  horaFin            DateTime?
  observaciones      String?
  proyectoId         String
  agendas            Agenda[]
  conclusiones       Conclusion[]
  autor              Autor        @relation(fields: [autorId], references: [id])
  proyecto           Proyecto     @relation(fields: [proyectoId], references: [id])
  evidencias         Evidencia[]
}

model Agenda {
  id           String     @id @default(uuid())
  codigo       String     @unique
  descripcion  String
  entrevistaId String
  entrevista   Entrevista @relation(fields: [entrevistaId], references: [id])
}

model Conclusion {
  id           String     @id @default(uuid())
  codigo       String     @unique
  descripcion  String
  entrevistaId String
  entrevista   Entrevista @relation(fields: [entrevistaId], references: [id])
}

model Evidencia {
  id             String     @id @default(uuid())
  codigo         String     @unique
  nombre         String
  entrevistaId   String
  fechaEvidencia DateTime   @default(now())
  archivo        String
  entrevista     Entrevista @relation(fields: [entrevistaId], references: [id])
}

model Interfaz {
  id          String   @id @default(uuid())
  codigo      String   @unique
  nombre      String
  version     String
  fecha       DateTime @default(now())
  archivoRuta String
  archivoTipo String
  proyectoId  String
  proyecto    Proyecto @relation(fields: [proyectoId], references: [id])
}

model RequerimientoNoFuncional {
  id                String    @id @default(uuid())
  codigo            String    @unique
  version           String
  fechaCreacion     DateTime  @default(now())
  fechaModificacion DateTime?
  nombre            String
  atributoCalidad   String
  descripcion       String
  estado            String
  importancia       String
  comentario        String?
  proyectoId        String
  proyecto          Proyecto  @relation(fields: [proyectoId], references: [id])
}

model Educcion {
  id                String    @id @default(uuid())
  codigo            String    @unique
  version           String
  fechaCreacion     DateTime  @default(now())
  fechaModificacion DateTime?
  nombre            String
  descripcion       String
  comentario        String?
  estado            String
  importancia       String
  proyectoId        String
  proyecto          Proyecto  @relation(fields: [proyectoId], references: [id])
  ilaciones         Ilacion[]
}

model Ilacion {
  id                String           @id @default(uuid())
  codigo            String           @unique
  version           String
  nombre            String
  fechaCreacion     DateTime         @default(now())
  fechaModificacion DateTime?
  estado            String
  importancia       String
  educcionId        String
  precondicion      String
  procedimiento     String
  postcondicion     String
  comentario        String?
  especificaciones  Especificacion[]
  educcion          Educcion         @relation(fields: [educcionId], references: [id])
}

model Especificacion {
  id                String    @id @default(uuid())
  codigo            String    @unique
  version           String
  nombre            String
  fechaCreacion     DateTime  @default(now())
  fechaModificacion DateTime?
  estado            String
  importancia       String
  ilacionId         String
  precondicion      String
  procedimiento     String
  postcondicion     String
  comentario        String?
  ilacion           Ilacion   @relation(fields: [ilacionId], references: [id])
}

model Rol {
  id            String   @id @default(uuid())
  nombre        String   @unique
  fechaCreacion DateTime @default(now())
  actores       Actor[]
  autores       Autor[]
}

model Autor {
  id              String       @id @default(uuid())
  codigo          String       @unique
  nombre          String
  apellidoPaterno String?
  apellidoMaterno String?
  alias           String?
  estado          String
  rolId           String?
  rol             Rol?         @relation(fields: [rolId], references: [id])
  entrevistas     Entrevista[]
}

model Actor {
  id         String   @id @default(uuid())
  codigo     String   @unique
  nombre     String
  estado     String
  tipo       String
  proyectoId String
  rolId      String
  proyecto   Proyecto @relation(fields: [proyectoId], references: [id])
  rol        Rol      @relation(fields: [rolId], references: [id])
}

model Fuente {
  id                String    @id @default(uuid())
  codigo            String    @unique
  version           String
  fechaCreacion     DateTime  @default(now())
  fechaModificacion DateTime?
  nombre            String
  comentario        String?
  estado            String
  proyectoId        String
  proyecto          Proyecto  @relation(fields: [proyectoId], references: [id])
}

model Experto {
  id                String    @id @default(uuid())
  codigo            String    @unique
  version           String
  fechaCreacion     DateTime  @default(now())
  fechaModificacion DateTime?
  apellidoPaterno   String
  apellidoMaterno   String?
  nombres           String
  experiencia       String
  comentario        String?
  estado            String
  proyectoId        String
  proyecto          Proyecto  @relation(fields: [proyectoId], references: [id])
}

model RelacionEntidad {
  id            String   @id @default(uuid())
  proyectoId    String
  tipoEntidad   String
  entidadId     String
  tipoRelacion  String
  relacionadoId String
  proyecto      Proyecto @relation(fields: [proyectoId], references: [id])
}

model Riesgo {
  id             String   @id @default(uuid())
  proyectoId     String
  tipoEntidad    String
  codigoRegistro String
  codigo         String   @unique
  descripcion    String
  impacto        String
  probabilidad   String
  estado         String
  fechaCreacion  DateTime @default(now())
  comentarios    String?
  proyecto       Proyecto @relation(fields: [proyectoId], references: [id])
}

model Artefacto {
  id       String @id @default(uuid())
  nombre   String @unique
  nemonico String @unique
}

model Contador {
  id         String   @id @default(uuid())
  entidad    String   // Nombre de la tabla hija, como "educcion", "ilacion", etc.
  contextoId String   // ID del "padre", como "proyectoId"
  contador   Int      @default(0) // Valor del contador
  @@unique([entidad, contextoId]) // Un contador único por entidad y contexto
}
